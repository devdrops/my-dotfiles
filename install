#!/bin/bash
##################################
# DOT FILES INSTALLER
##################################

# Git
if ! command -v git &> /dev/null
then
  echo "X GIT could not be found."
  exit 1
fi

# fzf
if ! command -v fzf &> /dev/null
then
  echo "X FZF could not be found."
  exit 1
fi

# delta
if ! command -v delta &> /dev/null
then
  echo "X Delta could not be found."
  exit 1
fi

# Vim
if ! command -v vim &> /dev/null
then
  echo "X VIM could not be found."
else
  echo "> Installing VIM settings"

  rm -rf "$HOME/.vim" && \
    cp -a ./.vim "$HOME/"
      # Vim 8 Packages:
      mkdir -p "$HOME/.vim/pack/themes/start"
      mkdir -p "$HOME/.vim/pack/plugins/start"
      # dracula (https://github.com/dracula/vim)
      git clone git@github.com:dracula/vim.git ~/.vim/pack/themes/start/dracula
      # vim-go (https://github.com/fatih/vim-go)
      git clone git@github.com:fatih/vim-go.git ~/.vim/pack/plugins/start/vim-go
      # vim-airline (https://github.com/vim-airline/vim-airline)
      git clone git@github.com:vim-airline/vim-airline.git ~/.vim/pack/plugins/start/vim-airline
      git clone git@github.com:vim-airline/vim-airline-themes.git ~/.vim/pack/plugins/start/vim-airline-themes
      # vim-fugitive (https://github.com/tpope/vim-fugitive)
      git clone git@github.com:tpope/vim-fugitive.git ~/.vim/pack/plugins/start/vim-fugitive
  echo "> VIM settings installed :)"
fi

# NeoVim
if ! command -v nvim &> /dev/null
then
  echo "X NVIM could not be found."
else
  echo "> Installing NVIM settings"

  if [ ! -d "$HOME/.config/nvim" ]
  then
    mkdir -p "$HOME/.config/nvim"
  fi
  rm -rf "$HOME/.config/nvim" && \
    cp -a ./nvim "$HOME/.config"

  echo "> NVIM settings installed :)"
fi

# Git
echo "> Installing GIT settings"

rm -rf "$HOME/.githooks_global" && \
    cp -a ./git/.git* "$HOME/"

echo "> GIT settings installed :)"

# tmux
if ! command -v tmux &> /dev/null
then
  echo "X TMUX could not be found."
else
  echo "> Installing TMUX settings"

  cp -a ./tmux/.tmux.conf "$HOME/.tmux.conf"

  echo "> TMUX settings installed :)"
fi

# tmate
if ! command -v tmate &> /dev/null
then
  echo "X TMATE could not be found."
else
  echo "> Installing TMATE settings"

  cp -a ./tmate/.tmate.conf "$HOME/.tmate.conf"

  echo "> TMATE settings installed :)"
fi

# ctags
if ! command -v ctags &> /dev/null
then
  echo "X CTAGS could not be found."
else
  echo "> Installing CTAGS settings"

  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    cp .ctags/.linux-ctags "$HOME/.ctags"
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    cp .ctags/.macos-ctags "$HOME/.ctags"
  fi

  echo "> CTAGS settings installed :)"
fi

# Shell extras
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
  cp ./sh/.linux-gnu-custom-settings "$HOME/" && \
    grep -qF "source $HOME/.linux-gnu-custom-settings" "$HOME/.zshrc" || printf "\n# %s custom shell:\nsource %s/.linux-gnu-custom-settings" "$USER" "$HOME" >> "$HOME/.zshrc"
elif [[ "$OSTYPE" == "darwin"* ]]; then
  cp ./sh/.darwin-custom-settings "$HOME/" && \
    grep -qF "source $HOME/.darwin-custom-settings" "$HOME/.zshrc" || printf "\n# %s custom shell:\nsource %s/.darwin-custom-settings" "$USER" "$HOME" >> "$HOME/.zshrc"
fi

# Binaries
rm -rf "$HOME/.my-binaries" && \
  cp -a ./bins "$HOME/.my-binaries"

# powerline/fonts (https://github.com/powerline/fonts)
git clone git@github.com:powerline/fonts.git --depth=1 $HOME/powerline-fonts
$SHELL $HOME/powerline-fonts/install.sh
rm -rf $HOME/powerline-fonts

# Finish!
exit 0
