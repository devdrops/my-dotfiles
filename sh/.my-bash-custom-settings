#!/bin/bash

##################################
#
# SHELL CUSTOM SETTINGS: BASH
#
# References:
#   http://mewbies.com/motd_console_codes_color_chart_in_color_black_background.htm#colors
#   https://samljones.com/2017-07-19/remote-pair-tmate-tmux/
#
##################################

###################
# ALIASES
###################

alias c="currentDir"
alias gt="goToDir"
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
  alias ls="ls -lah"
  alias xclip="xclip -selection clipboard"
else
  alias ls="ls -lat --color"
  alias xclip="pbcopy"
fi
alias expath="export PATH=$PATH:$(pwd)"
alias gc="git commit -S -v"

###################
# SOURCES
###################
checkGVM() {
  FILE=~/.gvm/scripts/gvm
  if [ -e "$FILE" ] ; then
    source $FILE
  fi
}
checkGVM

####################
# EXPORTS
####################

# Default text editor
export EDITOR=vim
# Kotlin
export PATH=$PATH:$HOME/kotlinc/bin
# Gradle
export PATH=$PATH:$HOME/gradle-4.6/bin
# Binaries
export PATH=$PATH:~/.my-binaries
# tmuxp (if present)
FILE=~/.local/bin/tmuxp
if [ -f "$FILE" ]; then
  export PATH=$PATH:~/.local/bin
fi
# Enable 256 color. Requires the contents from ./.terminfo
export TERM=screen-256color

###################
# FUNCTIONS
###################

function todayIs {
  declare -a TEXTCOLORS=("1" "2" "3" "4" "5" "6" "7")
  choosen=`shuf -i 1-${#TEXTCOLORS[@]} -n 1`

  tput setaf ${TEXTCOLORS[$choosen]};tput bold; echo "TODAY IS: "`date +%^A`, `date +%^B`, `date +%F`"\e[39m"
}
todayIs

function messageOfTheDay {
  echo $(curl -s -X GET 'http://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en' | jq '.quoteText')
}
#messageOfTheDay

function currentDir {
  pwd | xclip
}
function goToDir {
  cd $(xclip -o)
}

dotheupgrade() {
  sudo apt update && sudo apt upgrade -y
}

# Random phrases
function randomPhrase {
  declare -a QUALITIES=("good" "bad" "great" "terrible" "nice" "tough")
  declare -a SITUATIONS=("wear red socks on lava when using"
  "fishing sharks using your enemies with"
  "find a treasure hidden in your"
  "read a book about psycopaths with"
  "watch unicorns having sex using"
  "learn how mummies use to cook people using"
  "find an immigrant living inside your"
  "drink a lot of coffee with"
  "drive a racing car along with"
  "open a can of beans using"
  "wear anti-radiation clothes using your"
  "see the sunrise at Chernobyl with"
  "go to Mars using only your"
  "leave your house with only your"
  "travel to Spain riding"
  "worship a God that looks like"
  "create an statue of your"
  "watch Rick and Morty with your"
  "Get Schwifty using your"
  "learn a new recipe on how to cook"
  "fight aliens inside"
  "watch a boring TV show along with your"
  "choose your next president using"
  "run naked with only your"
  "eat boiling rice along with"
  )
  declare -a THINGS=("a cat"
  "cat"
  "a dog"
  "dog"
  "boots"
  "hat"
  "keyboard"
  "bottle"
  "money"
  "a cactus"
  "butter"
  "bottle of Mountain Dew"
  "spoon"
  "fork"
  "laser gun"
  "corn"
  "head"
  "knife"
  "Limp Bizkit album"
  "Elvis costume"
  "Terminator poster"
  "Terminator"
  "Barbie doll"
  "poncho"
  "credit card"
  "bread"
  "typewriter"
  "machine gun"
  "cocaine"
  "bottle of 51"
  "scissors"
  "shark"
  "chainsaw"
  "Old Spice"
  "TNT"
  "cat"
  "pencil"
  "Apple Watch"
  "cellphone"
  "spear"
  "Batman costume"
  "can of beans"
  "short camuflado da vovÃ³ Juju"
  )

  q=`shuf -i 1-${#QUALITIES[@]} -n 1`
  s=`shuf -i 1-${#SITUATIONS[@]} -n 1`
  t=`shuf -i 1-${#THINGS[@]} -n 1`

  echo "Today is a ${QUALITIES[$q]} day to ${SITUATIONS[$s]} ${THINGS[$t]}." | cowsay -f skeleton
}
randomPhrase

# TMUX / TMATE functions
TMATE_PAIR_NAME="$(whoami)-pair"
TMATE_SOCKET_LOCATION="/tmp/tmate-pair.sock"
TMATE_TMUX_SESSION="/tmp/tmate-tmux-session"

# Checks if there is a tmux session named 'dotfiles'
function checkDotfilesSession {
  tmux ls | grep 'dotfiles' &> /dev/null

  if [ $? = 0 ]; then
    echo "TEM SIM"
    return 1
  else
    echo "TEM NAO"
    return 0
  fi
}
#checkDotfilesSession

tmate-new() {
  tmate -S $TMATE_SOCKET_LOCATION new -s "$1"
}

tmate-ls() {
  tmate -S $TMATE_SOCKET_LOCATION ls
}

tmate-a() {
  if [ -z $1 ]; then
    tmate -S $TMATE_SOCKET_LOCATION a -t $TMATE_PAIR_NAME
  else
    tmate -S $TMATE_SOCKET_LOCATION a -t $1
  fi
}

tmate-write-url() {
  url="$(tmate -S $TMATE_SOCKET_LOCATION display -p 'WRITE: #{tmate_ssh} | #{tmate_web}')"
  echo "$url" | tr -d '\n' | xclip
  echo "Copied tmate URL for $TMATE_PAIR_NAME:"
  echo "$url"
}

tmate-read-url() {
  url="$(tmate -S $TMATE_SOCKET_LOCATION display -p 'READ: #{tmate_ssh_ro} | #{tmate_web_ro}')"
  echo "$url" | tr -d '\n' | xclip
  echo "Copied tmate URL for $TMATE_PAIR_NAME:"
  echo "$url"
}

tmate-pair() {
  if [ ! -e "$TMATE_SOCKET_LOCATION" ]; then
    tmate -S "$TMATE_SOCKET_LOCATION" -f "$HOME/.tmate.conf" new-session -d -s "$TMATE_PAIR_NAME"

    while [ -z "$url" ]; do
      url="$(tmate -S $TMATE_SOCKET_LOCATION display -p '#{tmate_ssh}')"
    done
    tmate-write-url
    sleep 1

    if [ -n "$1" ]; then
      echo $1 > $TMATE_TMUX_SESSION
      tmate -S "$TMATE_SOCKET_LOCATION" send -t "$TMATE_PAIR_NAME" "TMUX='' tmux attach-session -t $1" ENTER
    fi
  fi

  tmate -S "$TMATE_SOCKET_LOCATION" attach-session -t "$TMATE_PAIR_NAME"
}

tmate-unpair() {
  if [ -e "$TMATE_SOCKET_LOCATION" ]; then
    if [ -e "$TMATE_SOCKET_LOCATION" ]; then
      tmux detach -s $(cat $TMATE_TMUX_SESSION)
      rm -f $TMATE_TMUX_SESSION
    fi

    tmate -S "$TMATE_SOCKET_LOCATION" kill-session -t "$TMATE_PAIR_NAME"
    echo "Killed session $TMATE_PAIR_NAME"
  else
    echo "Session already killed"
  fi
}
