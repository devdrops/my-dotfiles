#!/bin/bash

##################################
# SHELL CUSTOM SETTINGS: ZSHELL
#
# This file should be used only in
# darwin* OS environments.
#
# References:
#   - https://stackoverflow.com/a/20983251
#   - https://linuxconfig.org/the-best-linux-terminal-color-schemes-for-2019
#   - https://invisible-island.net/xterm/
#   - https://linuxhint.com/ls_colors_bash/
#   - http://www.bigsoft.co.uk/blog/2008/04/11/configuring-ls_colors
#   - http://supercat.nosredna.net/
##################################

###################
# ALIASES
###################

# General
alias lls="longls ${1}"
alias xclip="pbcopy"
alias expath="export PATH=$PATH:$(pwd)"
alias grep="grep --no-messages --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.idea --exclude-dir=vendor --exclude=tags --exclude='*.log'"

# git
alias gc="git commit -S -v"
alias gdsafe="git branch --merged | egrep -v '(main|master|develop|^\*)' | xargs git branch -D"
alias gdall="git branch | egrep -v '(main|master|develop|^\*)' | xargs git branch -D"
alias gst="git status -u"
alias gsl="git stash list"
alias glu="git ls-files --others --exclude-standard"

# Docker
alias dbbk="DOCKER_BUILDKIT=1 docker build"
alias db="docker build"
alias drmi="docker rmi ${1} -f"

# Docker Compose
alias dcu="docker-compose up"
alias dcd="docker-compose down"
alias dck="docker-compose kill -s SIGKILL"
alias dcs="docker-compose stop"
alias dcb="docker-compose build"
alias dce="docker-compose exec"
alias dcl="docker-compose logs"
alias dcr="docker-compose run"
alias dct="docker-compose top"
alias dcud="docker-compose up -d"
alias dcbnc="docker-compose build --no-cache"
alias dcrmv="docker-compose rm -v -f"

####################
# EXPORTS
####################

# Default text editor
export EDITOR=vim
# Binaries
export PATH=$PATH:~/.my-binaries
# Terminal colors
export TERM=xterm-256color-italic
# Colors to ls
LS_COLORS='fi=0;92:rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=03;32:*.tar=2;37:*.tgz=2;37:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=2;37:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:*.md=0;35:*.markdown=0;35:';
export LS_COLORS
# Vim/Nvim variables
export VIM_CUSTOM_MAX_COLUMN_LENGTH=121

###################
# FUNCTIONS
###################

function longls {
  local HEADERS="SIZE|PERMS|LINK COUNT|OWNER|GROUP|SIZE|MOD TIME|NAME"
  tput bold; tput smul; echo -e "$HEADERS" | column -t -s"|"; tput sgr0
  if [ ! "${1}" ]; then
    ls --color=always -ahlst | grep -v '^total'
  else
    ls --color=always -ahlst ${1} | grep -v '^total'
  fi
}

function todayIs {
  declare -a TEXTCOLORS=("1" "2" "3" "4" "5" "6" "7")
  choosen=`gshuf -i 1-${#TEXTCOLORS[@]} -n 1`

  tput setaf ${TEXTCOLORS[$choosen]};tput bold; date "+Hoje é: %A, %d de %B, %Y"
}
todayIs

function messageOfTheDay {
  local MESSAGE_REQUEST=$(curl -s -X GET 'http://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en')

  if command -v jq &> /dev/null
  then
    echo -e "${MESSAGE_REQUEST}" | jq '.quoteText' | cowthink -f duck
  else
    echo -e "${MESSAGE_REQUEST}" | awk -F ':' '{print $2}' | sed 's/, "quoteAuthor"//g' | cowthink -f duck
  fi
}
messageOfTheDay

# Random phrases
function randomPhrase {
  declare -a QUALITIES=("good" "bad" "great" "terrible" "nice" "tough")
  declare -a SITUATIONS=("wear red socks on lava when using"
  "fishing sharks using your enemies with"
  "find a treasure hidden in your"
  "read a book about psycopaths with"
  "watch unicorns having sex using"
  "learn how mummies use to cook people using"
  "find an immigrant living inside your"
  "drink a lot of coffee with"
  "drive a racing car along with"
  "open a can of beans using"
  "wear anti-radiation clothes using your"
  "see the sunrise at Chernobyl with"
  "go to Mars using only your"
  "leave your house with only your"
  "travel to Spain riding"
  "worship a God that looks like"
  "create an statue of your"
  "watch Rick and Morty with your"
  "Get Schwifty using your"
  "learn a new recipe on how to cook"
  "fight aliens inside"
  "watch a boring TV show along with your"
  "choose your next president using"
  "run naked with only your"
  "eat boiling rice along with"
  )
  declare -a THINGS=("a cat"
  "cat"
  "a dog"
  "dog"
  "boots"
  "hat"
  "keyboard"
  "bottle"
  "money"
  "a cactus"
  "butter"
  "bottle of Mountain Dew"
  "spoon"
  "fork"
  "laser gun"
  "corn"
  "head"
  "knife"
  "Limp Bizkit album"
  "Elvis costume"
  "Terminator poster"
  "Terminator"
  "Barbie doll"
  "poncho"
  "credit card"
  "bread"
  "typewriter"
  "machine gun"
  "cocaine"
  "bottle of 51"
  "scissors"
  "shark"
  "chainsaw"
  "Old Spice"
  "TNT"
  "cat"
  "pencil"
  "Apple Watch"
  "cellphone"
  "spear"
  "Batman costume"
  "can of beans"
  "short camuflado da vovó Juju"
  )

  q=`shuf -i 1-${#QUALITIES[@]} -n 1`
  s=`shuf -i 1-${#SITUATIONS[@]} -n 1`
  t=`shuf -i 1-${#THINGS[@]} -n 1`

  echo "Today is a ${QUALITIES[$q]} day to ${SITUATIONS[$s]} ${THINGS[$t]}." | cowsay -f skeleton
}
#randomPhrase

# TMUX / TMATE functions
TMATE_PAIR_NAME="$(whoami)-pair"
TMATE_SOCKET_LOCATION="/tmp/tmate-pair.sock"
TMATE_TMUX_SESSION="/tmp/tmate-tmux-session"

# Checks if there is a tmux session named 'dotfiles'
function checkDotfilesSession {
  tmux ls | grep 'dotfiles' &> /dev/null

  if [ $? = 0 ]; then
    echo "TEM SIM"
    return 1
  else
    echo "TEM NAO"
    return 0
  fi
}
#checkDotfilesSession

tmate-new() {
  tmate -S $TMATE_SOCKET_LOCATION new -s "$1"
}

tmate-ls() {
  tmate -S $TMATE_SOCKET_LOCATION ls
}

tmate-a() {
  if [ -z $1 ]; then
    tmate -S $TMATE_SOCKET_LOCATION a -t $TMATE_PAIR_NAME
  else
    tmate -S $TMATE_SOCKET_LOCATION a -t $1
  fi
}

tmate-write-url() {
  url="$(tmate -S $TMATE_SOCKET_LOCATION display -p 'WRITE: #{tmate_ssh} | #{tmate_web}')"
  echo "$url" | tr -d '\n' | xclip
  echo "Copied tmate URL for $TMATE_PAIR_NAME:"
  echo "$url"
}

tmate-read-url() {
  url="$(tmate -S $TMATE_SOCKET_LOCATION display -p 'READ: #{tmate_ssh_ro} | #{tmate_web_ro}')"
  echo "$url" | tr -d '\n' | xclip
  echo "Copied tmate URL for $TMATE_PAIR_NAME:"
  echo "$url"
}

tmate-pair() {
  if [ ! -e "$TMATE_SOCKET_LOCATION" ]; then
    tmate -S "$TMATE_SOCKET_LOCATION" -f "$HOME/.tmate.conf" new-session -d -s "$TMATE_PAIR_NAME"

    while [ -z "$url" ]; do
      url="$(tmate -S $TMATE_SOCKET_LOCATION display -p '#{tmate_ssh}')"
    done
    tmate-write-url
    sleep 1

    if [ -n "$1" ]; then
      echo $1 > $TMATE_TMUX_SESSION
      tmate -S "$TMATE_SOCKET_LOCATION" send -t "$TMATE_PAIR_NAME" "TMUX='' tmux attach-session -t $1" ENTER
    fi
  fi

  tmate -S "$TMATE_SOCKET_LOCATION" attach-session -t "$TMATE_PAIR_NAME"
}

tmate-unpair() {
  if [ -e "$TMATE_SOCKET_LOCATION" ]; then
    if [ -e "$TMATE_SOCKET_LOCATION" ]; then
      tmux detach -s $(cat $TMATE_TMUX_SESSION)
      rm -f $TMATE_TMUX_SESSION
    fi

    tmate -S "$TMATE_SOCKET_LOCATION" kill-session -t "$TMATE_PAIR_NAME"
    echo "Killed session $TMATE_PAIR_NAME"
  else
    echo "Session already killed"
  fi
}

function diffPR {
  CUR_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
  if [ ! "${1}" ]; then
    BRANCHES="$(git branch --remote | egrep '(main|master|develop)' | grep -v HEAD)"
    echo $BRANCHES
    echo Escolha uma das branches acima:
    read BASE_BRANCH
  else
    BASE_BRANCH=${1}
  fi
  git difftool $BASE_BRANCH...$CUR_BRANCH --diff-filter=AM
}

function phpToolboxCBF {
  CUR_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
  if [ ! "${1}" ]; then
    BRANCHES="$(git branch --remote | egrep '(main|master|develop)' | grep -v HEAD)"
    echo $BRANCHES
    echo Escolha uma das branches acima:
    read BASE_BRANCH
  else
    BASE_BRANCH=${1}
  fi
  git diff $BASE_BRANCH...$CUR_BRANCH --name-only --diff-filter=AM | xargs -I {} sh -c 'printf "\nINSPECTING WITH PHPCBF %s:\n" {};docker run -t --rm -v $(pwd):/code -w /code devdrops/php-toolbox:latest phpcbf {}'
}

function phpToolboxCS {
  CUR_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
  if [ ! "${1}" ]; then
    BRANCHES="$(git branch --remote | egrep '(main|master|develop)' | grep -v HEAD)"
    echo $BRANCHES
    echo Escolha uma das branches acima:
    read BASE_BRANCH
  else
    BASE_BRANCH=${1}
  fi
  git diff $BASE_BRANCH...$CUR_BRANCH --name-only --diff-filter=AM | xargs -I {} sh -c 'printf "\nINSPECTING WITH PHPCS %s:\n" {};docker run -t --rm -v $(pwd):/code -w /code devdrops/php-toolbox:latest phpcs {}'
}

function phpToolboxCSFixer {
  CUR_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
  if [ ! "${1}" ]; then
    BRANCHES="$(git branch --remote | egrep '(main|master|develop)' | grep -v HEAD)"
    echo $BRANCHES
    echo Escolha uma das branches acima:
    read BASE_BRANCH
  else
    BASE_BRANCH=${1}
  fi
  git diff $BASE_BRANCH...$CUR_BRANCH --name-only --diff-filter=AM | xargs -I {} sh -c 'printf "\nINSPECTING WITH PHP CS FIXER %s:\n" {};docker run -t --rm -v $(pwd):/code -w /code devdrops/php-toolbox:latest php-cs-fixer fix {}'
}

function phpToolboxMD {
  CUR_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
  if [ ! "${1}" ]; then
    BRANCHES="$(git branch --remote | egrep '(main|master|develop)' | grep -v HEAD)"
    echo $BRANCHES
    echo Escolha uma das branches acima:
    read BASE_BRANCH
  else
    BASE_BRANCH=${1}
  fi
  git diff $BASE_BRANCH...$CUR_BRANCH --name-only --diff-filter=AM | xargs -I {} sh -c 'printf "\nINSPECTING WITH PHPMD %s:\n" {};docker run -t --rm -v $(pwd):/code -w /code devdrops/php-toolbox:latest phpmd {} text cleancode,codesize,controversial,design,naming,unusedcode'
}

function phpToolboxLoC {
  CUR_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
  if [ ! "${1}" ]; then
    BRANCHES="$(git branch --remote | egrep '(main|master|develop)' | grep -v HEAD)"
    echo $BRANCHES
    echo Escolha uma das branches acima:
    read BASE_BRANCH
  else
    BASE_BRANCH=${1}
  fi
  git diff $BASE_BRANCH...$CUR_BRANCH --name-only --diff-filter=AM | xargs -I {} sh -c 'printf "\nINSPECTING WITH PHPLOC %s:\n" {};docker run -t --rm -v $(pwd):/code -w /code devdrops/php-toolbox:latest phploc {}'
}

function phpToolboxStan {
  CUR_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
  if [ ! "${1}" ]; then
    BRANCHES="$(git branch --remote | egrep '(main|master|develop)' | grep -v HEAD)"
    echo $BRANCHES
    echo Escolha uma das branches acima:
    read BASE_BRANCH
  else
    BASE_BRANCH=${1}
  fi
  git diff $BASE_BRANCH...$CUR_BRANCH --name-only --diff-filter=AM | xargs -I {} sh -c 'printf "\nINSPECTING WITH PHPSTAN %s:\n" {};docker run -t --rm -v $(pwd):/code -w /code devdrops/php-toolbox:latest phpstan analyze {} --memory-limit 1G'
}

function phpToolboxPsalm {
  CUR_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
  if [ ! "${1}" ]; then
    BRANCHES="$(git branch --remote | egrep '(main|master|develop)' | grep -v HEAD)"
    echo $BRANCHES
    echo Escolha uma das branches acima:
    read BASE_BRANCH
  else
    BASE_BRANCH=${1}
  fi
  git diff $BASE_BRANCH...$CUR_BRANCH --name-only --diff-filter=AM | xargs -I {} sh -c 'printf "\nINSPECTING WITH PSALM %s:\n" {};docker run -t --rm -v $(pwd):/code -w /code devdrops/php-toolbox:latest psalm {}'
}

function toB64 {
  echo ${1} | base64 -w 0 | xclip
}

function fromB64 {
  echo ${1} | base64 -d | xclip
}

# Kubernetes
if command -v kubectl &> /dev/null
then
  # setup autocomplete in zsh into the current shell
  source <(kubectl completion zsh)
  [[ $commands[kubectl] ]] && source <(kubectl completion zsh)
fi
